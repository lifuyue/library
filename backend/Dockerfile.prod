# Backend Production Dockerfile
# Multi-stage build for optimized production image

## Build stage
FROM python:3.11-slim AS builder

ENV PIP_NO_CACHE_DIR=1 \
    PYTHONDONTWRITEBYTECODE=1

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and create wheels
ARG INCLUDE_DEV_REQS="false"
COPY requirements.txt requirements.dev.txt ./
RUN pip install --upgrade pip setuptools wheel && \
    if [ "$INCLUDE_DEV_REQS" = "true" ]; then \
        pip wheel --wheel-dir /wheels -r requirements.dev.txt; \
    else \
        pip wheel --wheel-dir /wheels -r requirements.txt; \
    fi

## Runtime stage
FROM python:3.11-slim AS runtime

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PYTHONDONTWRITEBYTECODE=1

WORKDIR /app

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages from wheels (faster, no compilation needed)
COPY --from=builder /wheels /wheels
RUN pip install --no-cache-dir /wheels/* && \
    python -m pip check

# Copy application code
COPY . .

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser && \
    mkdir -p /app/uploads && \
    chown -R appuser:appuser /app && \
    chmod +x /app/scripts/entrypoint.sh

USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/healthz || exit 1

ENTRYPOINT ["/app/scripts/entrypoint.sh"]
# Production command with gunicorn for better performance
CMD ["gunicorn", "-k", "uvicorn.workers.UvicornWorker", "main:app", "--bind", "0.0.0.0:8000", "--workers", "4"]
