services:
  # PostgreSQL 数据库服务
  postgresql:
    image: postgres:17.6-alpine
    container_name: cslibrary-postgres
    env_file:
      - .env.deploy
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: [
      "postgres",
      "-c","log_destination=stderr",
      "-c","logging_collector=off",
      "-c","log_min_messages=debug1",
      "-c","log_statement=all",
      "-c","client_min_messages=log"
    ]
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - cslibrary-net
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # 后端服务
  cslibrary-backend:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.backend
    container_name: cslibrary-backend
    # 内部网络暴露，生产由 nginx 统一对外
    env_file:
      - .env.deploy
    environment:
      - APP_WORKERS=${APP_WORKERS:-2}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - backend_uploads:/app/uploads
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/api/health || curl -fsS http://localhost:8000/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - cslibrary-net

  # 前端服务（内部 Nginx 提供静态文件，端口 80）
  cslibrary-frontend:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile.frontend
      args:
        VITE_API_BASE_URL: http://cslibrary-backend:8000
    container_name: cslibrary-frontend
    # 内部网络暴露，生产由 nginx 统一对外
    depends_on:
      - cslibrary-backend
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://127.0.0.1/ > /dev/null"]
      interval: 15s
      timeout: 3s
      retries: 5
    networks:
      - cslibrary-net

  # 入口 Nginx 反向代理（单一外部入口）
  nginx:
    image: nginx:1.27-alpine
    container_name: cslibrary-nginx
    depends_on:
      - cslibrary-backend
      - cslibrary-frontend
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1/ >/dev/null || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
    networks:
      - cslibrary-net

volumes:
  backend_uploads:
    driver: local
  pg_data:
    driver: local

networks:
  cslibrary-net:
    driver: bridge
