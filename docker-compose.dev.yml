# Development Docker Compose Configuration
# Usage: docker compose -f docker-compose.dev.yml up
# Features: Hot reload, volume mounts, development optimizations

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: dev-backend
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    environment:
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    volumes:
      # Mount source code for hot reload
      - ./backend:/app
      # Persist uploads across container restarts
      - backend_uploads:/app/uploads
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./frontend  
      dockerfile: Dockerfile.dev
    container_name: dev-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - NODE_ENV=development
      - DATABASE_URL=postgres://csuser:change_me@postgres:5432/cslibrary
    volumes:
      # Mount source code for hot reload
      - ./frontend:/app
      # Anonymous volume to prevent node_modules from being overwritten
      - /app/node_modules
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]
    depends_on:
      - backend
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: postgres
    environment:
      POSTGRES_USER: csuser
      POSTGRES_PASSWORD: change_me
      POSTGRES_DB: cslibrary
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U csuser -d cslibrary"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      default:
        aliases:
          - postgres
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  backend_uploads:
  db_data:
